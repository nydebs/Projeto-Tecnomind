// backend/config/passport.js

const GoogleStrategy = require('passport-google-oauth20').Strategy;

// LINHA PARA IMPORTAR O CLIENTE PRISMA
const prisma = require('./db'); 

module.exports = function(passport) {
Â  Â  passport.use(new GoogleStrategy({
Â  Â  Â  Â  clientID: process.env.GOOGLE_CLIENT_ID,
Â  Â  Â  Â  clientSecret: process.env.GOOGLE_CLIENT_SECRET,
Â  Â  Â  Â  callbackURL: '/auth/google/callback'
Â  Â  },
Â  Â  async (accessToken, refreshToken, profile, done) => {
Â  Â  Â  Â  
Â  Â  Â  Â  const newUser = {
Â  Â  Â  Â  Â  Â  googleId: profile.id,
Â  Â  Â  Â  Â  Â  displayName: profile.displayName,
Â  Â  Â  Â  Â  Â  firstName: profile.name.givenName,
Â  Â  Â  Â  Â  Â  lastName: profile.name.familyName,
Â  Â  Â  Â  Â  Â  image: profile.photos[0].value,
Â  Â  Â  Â  Â  Â  email: profile.emails[0].value 
Â  Â  Â  Â  }

Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  // 1. Procurar o usuÃ¡rio no seu Banco de Dados
Â  Â  Â  Â  Â  Â  // CORREÃ‡ÃƒO: Substitui 'User.findOne' por 'prisma.user.findUnique'
Â  Â  Â  Â  Â  Â  let user = await prisma.user.findUnique({ where: { googleId: profile.id } }); 

Â  Â  Â  Â  Â  Â  if (user) {
Â  Â  Â  Â  Â  Â  Â  Â  done(null, user);
Â  Â  Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  Â  Â  Â  // UsuÃ¡rio novo, cria e loga
Â  Â  Â  Â  Â  Â  Â  Â  // CORREÃ‡ÃƒO: Substitui 'User.create' por 'prisma.user.create'
Â  Â  Â  Â  Â  Â  Â  Â  user = await prisma.user.create({ data: newUser }); 
Â  Â  Â  Â  Â  Â  Â  Â  done(null, user);
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  } catch (err) {
Â  Â  Â  Â  Â  Â  console.error(err);
Â  Â  Â  Â  Â  Â  done(err, null);
Â  Â  Â  Â  }
Â  Â  }));

Â  Â  // SerializaÃ§Ã£o/DesserializaÃ§Ã£o para sessÃµes
Â  Â  passport.serializeUser((user, done) => {
Â  Â  Â  Â  done(null, user.id); 
Â  Â  });

    // ðŸš¨ CORREÃ‡ÃƒO: Substitui 'User.findById(id).then(...)' por 'prisma.user.findUnique' com async/await
Â  Â  passport.deserializeUser(async (id, done) => {
        try {
            // Recupera o usuÃ¡rio do DB pelo ID armazenado na sessÃ£o
            const user = await prisma.user.findUnique({
                // O ID da sua tabela 'User' Ã© um nÃºmero (Int)
                where: { id: parseInt(id) } 
            });
            done(null, user);
        } catch (err) {
            done(err, null);
        }
Â  Â  });
}